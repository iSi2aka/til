# forを使用した繰り返し
-------------------------------------------------------------------------
fruits = [apple, orange, lemon]

fruits.forEach(fruit -> System.out.println(fruit));    //1行の変更ならばアローを使用して簡略化可能

furites.forEach(fruit -> {
    String furuitUpper = fruit.toUpperCase());
    System.out.println(fruitUpper);
});                                                     //2行以上の変更ならば{}を使ってインデントを使って記述する

for (String fruit : fruits) {
    System.out.println(fruit);
}                                                        //forのみで記述も可能

-------------------------------------------------------------------------
# for と if の組み合わせ
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

numbers.forEach(number -> {                              //配列numbersの各要素を“number”として抽出
    if (number % 2 == 0) {
        System.out.println(number + " = 偶数");          //抽出したnumberを偶数か判定する
    } else {
        System.out.println(number + " = 奇数");
    }
}                                                        //1 = 奇数
                                                         //2 = 偶数......

==============================================================================

# 二重ループ
------------------------------------------------------------------------------
1. forループを使用した2重ループ
java
Copy code
for (int i = 1; i <= 3; i++) {
    for (int j = 1; j <= 3; j++) {
        System.out.println("外側のループ: " + i + ", 内側のループ: " + j);
    }
}
上記の例では、外側のループが1から3まで3回繰り返され、内側のループも1から3まで3回繰り返されます。それぞれの内外のループの値が表示されます。

------------------------------------------------------------------------------
2. whileループを使用した2重ループ
java
Copy code
int i = 1;
while (i <= 3) {
    int j = 1;
    while (j <= 3) {
        System.out.println("外側のループ: " + i + ", 内側のループ: " + j);
        j++;
    }
    i++;
}
この例では、whileループを使用して同じ結果を得ています。外側のループが1から3まで繰り返され、その内側のループが1から3まで繰り返されます。

2重ループは、行列の要素にアクセスする、あるいはある処理を特定の回数だけ繰り返すなどの場面で有用です。ただし、適切に使わないと無限ループに陥る可能性もあるので、慎重に扱う必要があります。

========================================================================================
